#
# Add the paginator's "current page" value to cache entry identifiers in cache layers above the blog posts index.
# Depending on your actual page structure you will have to add this identifier part to further TypoScript object
# cache configurations.
#
root.@cache.entryIdentifier.blogPostsPaginatorCurrentPage = ${request.pluginArguments.posts-paginator.currentPage}

prototype(TYPO3.Neos:Page) {
	@cache.entryIdentifier.blogPostsPaginatorCurrentPage = ${request.pluginArguments.posts-paginator.currentPage}
}

prototype(TYPO3.Neos:PrimaryContent).default {
	renderer.@cache.entryIdentifier.blogPostsPaginatorCurrentPage = ${request.pluginArguments.posts-paginator.currentPage}
}

#
# Add a new matcher to the rendering of the main content (PrimaryContent) to check if the current node
# is a blog post document. In this case we don't render a ContentCollection like the default matcher
# but render the blog post TypoScript object.
#
prototype(TYPO3.Neos:PrimaryContent).blogPost {
	condition = ${q(documentNode).is('[instanceof RobertLemke.Plugin.Blog:Post]')}
	type = 'RobertLemke.Plugin.Blog:Post'
}

#
# Blog Post is rendered by a Template-based TypoScript object which contains some
# properties on its own (title, ...) and renders sub nodes contained in two
# separate sections, namely "main" for the actual post content and "comments" for
# the comment nodes.
#
# The blog post content is made of several content elements which are rendered
# as a collection just like a page would render its content elements. Hence the
# usage of ContentCollection.
#
# The blog post comments are just several Text nodes which are as well rendered
# through the TypoScript collection feature.
#
prototype(RobertLemke.Plugin.Blog:Post) < prototype(TYPO3.Neos:Content) {
	node = ${node}

	# Render the main ContentCollection of the Post like a page would
	main = TYPO3.Neos:ContentCollection {
		nodePath = 'main'
	}

	# Render an additional ContentCollection for comments
	comments = TYPO3.Neos:ContentCollection {
		nodePath = 'comments'
	}

	numberOfComments = ${q(node).children('comments').children('[spam = false]').count()}

	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
			content = 'blogpost'
		}
		entryTags {
			1 = ${'Node_' + node.identifier}
			2 = ${'DescendantOf_' + q(node).find('main').property('_identifier')}
			3 = ${'DescendantOf_' + q(node).find('comments').property('_identifier')}
		}
	}
}

#
# Blog Comment is rendered by a vanilla Template-based TypoScript object
#
prototype(RobertLemke.Plugin.Blog:Comment) {
}

#
# List of most recent blog posts, including pagination
#
prototype(RobertLemke.Plugin.Blog:PostsOverview) < prototype(TYPO3.Neos:Content) {
	hasPostNodes = true
	postsNode = ${q(node).closest('[instanceof TYPO3.Neos:Document]').get(0)}
	currentPage = ${request.pluginArguments.posts-paginator.currentPage}

	@cache {
		mode = 'cached'
		entryIdentifier {
			documentNode = ${node}
			currentPage = ${request.pluginArguments.posts-paginator.currentPage}
		}
		entryTags {
			1 = ${'Node_' + node.identifier}
			2 = ${'DescendantOf_' + q(node).property('_identifier')}
		}
	}
}

#
# RSS feed
#
prototype(RobertLemke.Plugin.Blog:Feed) < prototype(TYPO3.Neos:Plugin) {
	package = 'RobertLemke.Plugin.Blog'
	controller = 'Post'
	action = 'rss'
}

#
# Quote is a straight-forward content type
#
prototype(RobertLemke.Plugin.Blog:Quote) < prototype(TYPO3.Neos:Content) {
}
